#
# SConscript for src directory
#
import subprocess
import os
import platform
import json
import hashlib

system = platform.system().lower()

def CreateProgramMetadataGenerator(config):
    def GenerateProgramMetadata(target, source, env):
        flags = dict()
        flags["CFLAGS"] = str(env["CFLAGS"])
        flags["LINKFLAGS"] = str(env["LINKFLAGS"])

        executable = source[0]
        executable_file = open(executable.abspath, "r")
        executable_sha1 = hashlib.sha1(executable_file.read()).hexdigest()
        executable_file.close()

        stripped = source[1]
        stripped_file = open(stripped.abspath, "r")
        stripped_sha1 = hashlib.sha1(stripped_file.read()).hexdigest()
        stripped_file.close()

        debug = source[2]
        if debug.abspath != executable.abspath:
            debug_file = open(debug.abspath, "r")
            debug_sha1 = hashlib.sha1(debug_file.read()).hexdigest()
            debug_file.close()
        else:
            debug_sha1 = None

        obj_sha1s = dict()
        for obj in source[2:]:
            obj_file = open(obj.abspath, "r")
            obj_sha1 = hashlib.sha1(obj_file.read()).hexdigest()
            obj_file.close()
            obj_sha1s[obj.name] = obj_sha1

        metadata = dict()
        metadata["configName"] = config
        metadata["baseName"] = executable.name
        metadata["flags"] = flags
        metadata["platform"] = system
        metadata["compiler"] = subprocess.check_output("gcc --version", shell=True)
        metadata["machine"] = platform.machine().lower()
        metadata["objectSha1s"] = obj_sha1s
        metadata["executableSha1"] = executable_sha1
        metadata["debugSha1"] = debug_sha1
        metadata["strippedSha1"] = stripped_sha1

        json_output = open(target[0].abspath, "w")
        json_output.write(json.dumps(metadata))
        json_output.flush()
        json_output.close()

        return None

    return GenerateProgramMetadata

def AddDebugFlag(env):
    if env['CC'] == 'gcc':
        env.Append(CFLAGS = '-g')

def AddPieFlag(env):
    if platform.system() == 'Linux':
        if env['CC'] == 'gcc':
            env.Append(CFLAGS = '-fPIE')
            env.Append(LINKFLAGS = '-pie')

def DisablePieFlag(env):
    if platform.system() == 'Darwin':
        if env['CC'] == 'gcc':
            env.Append(LINKFLAGS = '-Wl,-no_pie')

def DebugNoOptDynamic(env):
    AddDebugFlag(env)
    DisablePieFlag(env)

def DebugNoOpDynamicPie(env):
    AddDebugFlag(env)
    AddPieFlag(env)

configs = list()
configs.append(("debug-noopt-dynamic", DebugNoOptDynamic))
configs.append(("debug-noopt-dynamic-pie", DebugNoOpDynamicPie))

Import('rootenv')

localenv = rootenv.Clone()

sources_file = open(File("sources.json").srcnode().abspath, "r")
source_configs = json.load(sources_file)
sources_file.close()

def Executable(env, target, objs, libs):
    if platform.system() == 'Darwin':
        program = env.Program(target, objs, LIBS=libs)
        debug = env.Command(target + ".debug", program, "dsymutil -f -o $TARGET $SOURCES")
        stripped = env.Command(target + ".nosym", program, "strip -o $TARGET $SOURCES")
        return [program, stripped, debug]
    elif platform.system() == 'Linux':
        program = env.Program(target, objs, LIBS=libs)
        stripped = env.Command(target + ".nosym", program, "strip -o $TARGET $SOURCES")
        return [program, stripped, program]
    else:
        raise RuntimeError("Unknown platform")

localenv.AddMethod(Executable, "Executable")

for config in configs:
    loopenv = localenv.Clone()
    config[1](loopenv)

    saved_objs = dict()

    for source_config in source_configs:
        objs = []
        for source in source_config["sources"]:
            if source in saved_objs:
                objs.append(saved_objs[source])
            else:
                objs.append(loopenv.Object("${SOURCE.filebase}" + "-" + config[0] + "$OBJSUFFIX", source))

        if system in source_config["platform_sources"]:
            for source in source_config["platform_sources"][system]:
                if source in saved_objs:
                    objs.append(saved_objs[source])
                else:
                    objs.append(loopenv.Object("${SOURCE.filebase}" + "-" + config[0] + "$OBJSUFFIX", source))

        libs = []
        if system in source_config["libs"]:
            for lib in source_config["libs"][system]:
                libs.append(lib)

        executables = loopenv.Executable(source_config["name"] + "-" + config[0], objs, libs=libs)

        metadata_sources = list()
        metadata_sources.append(executables)
        metadata_sources.append(objs)
        loopenv.Command(source_config["name"] + "-" + config[0] + ".json", metadata_sources, CreateProgramMetadataGenerator(config[0]))

# vim: ft=python
