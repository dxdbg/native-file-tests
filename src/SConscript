#
# SConscript for src directory
#
import subprocess
import os
import platform
import json
import hashlib

system = platform.system().lower()

def GenerateProgramMetadata(target, source, env):
    flags = dict()
    flags["CFLAGS"] = str(env["CFLAGS"])
    flags["LINKFLAGS"] = str(env["LINKFLAGS"])

    executable = source[0]
    executable_file = open(executable.abspath, "r")
    executable_sha1 = hashlib.sha1(executable_file.read()).hexdigest()
    executable_file.close()

    obj_sha1s = dict()
    for obj in source[1:]:
        obj_file = open(obj.abspath, "r")
        obj_sha1 = hashlib.sha1(obj_file.read()).hexdigest()
        obj_file.close()
        obj_sha1s[obj.name] = obj_sha1

    metadata = dict()
    metadata["flags"] = flags
    metadata["platform"] = system
    metadata["compiler"] = subprocess.check_output("gcc --version", shell=True)
    metadata["machine"] = platform.machine().lower()
    metadata["objectSha1s"] = obj_sha1s
    metadata["executableSha1"] = executable_sha1

    json_output = open(target[0].abspath, "w")
    json_output.write(json.dumps(metadata))
    json_output.flush()
    json_output.close()

    return None

def AddDebugFlag(env):
    if env['CC'] == 'gcc':
        env.Append(CFLAGS = '-g')

def DebugNoOptDynamic(env):
    AddDebugFlag(env)

configs = list()
configs.append(("debug-noopt-dynamic", DebugNoOptDynamic))

Import('rootenv')

localenv = rootenv.Clone()

sources_file = open(File("sources.json").srcnode().abspath, "r")
source_configs = json.load(sources_file)
sources_file.close()


for config in configs:
    loopenv = localenv.Clone()
    config[1](loopenv)

    saved_objs = dict()

    for source_config in source_configs:
        objs = []
        for source in source_config["sources"]:
            if source in saved_objs:
                objs.append(saved_objs[source])
            else:
                objs.append(loopenv.Object("${SOURCE.filebase}" + "-" + config[0] + "$OBJSUFFIX", source))

        if system in source_config["platform_sources"]:
            for source in source_config["platform_sources"][system]:
                if source in saved_objs:
                    objs.append(saved_objs[source])
                else:
                    objs.append(loopenv.Object("${SOURCE.filebase}" + "-" + config[0] + "$OBJSUFFIX", source))

        libs = []
        if system in source_config["libs"]:
            for lib in source_config["libs"][system]:
                libs.append(lib)

        executable = loopenv.Program(source_config["name"] + "-" + config[0], objs, LIBS=libs)

        metadata_sources = [executable]
        metadata_sources.append(objs)
        loopenv.Command(source_config["name"] + "-" + config[0] + ".json", metadata_sources, GenerateProgramMetadata)

# vim: ft=python
